package validator;

import java.util.function.Consumer;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.equinox.app.IApplication;
import org.eclipse.equinox.app.IApplicationContext;
import org.eclipse.viatra.query.runtime.api.AdvancedViatraQueryEngine;
import org.eclipse.viatra.query.runtime.api.IMatchUpdateListener;
import org.eclipse.viatra.query.runtime.api.ViatraQueryEngine;
import org.eclipse.viatra.query.runtime.emf.EMFScope;
import org.eclipse.viatra.transformation.runtime.emf.modelmanipulation.IModelManipulations;
import org.eclipse.viatra.transformation.runtime.emf.modelmanipulation.SimpleModelManipulations;
import org.eclipse.viatra.transformation.runtime.emf.rules.batch.BatchTransformationRule;
import org.eclipse.viatra.transformation.runtime.emf.rules.batch.BatchTransformationRuleFactory;
import org.eclipse.viatra.transformation.runtime.emf.transformation.batch.BatchTransformation;
import org.eclipse.viatra.transformation.runtime.emf.transformation.batch.BatchTransformationStatements;
import org.eclipse.xtext.xbase.lib.Extension;

import com.google.common.base.Objects;

import queries.RoleName;
import queries.SameRoleName;
import queries.TestQueries;

public class Validator implements IApplication {
	
	  /**
	   * Transformation-related extensions
	   */
	  @Extension
	  private BatchTransformation transformation;
	  
	  @Extension
	  private BatchTransformationStatements statements;
	  
	  /**
	   * Transformation rule-related extensions
	   */
	  @Extension
	  private BatchTransformationRuleFactory factory = new BatchTransformationRuleFactory();
	  
	  @Extension
	  private IModelManipulations manipulation;
	  

	@Override
	public Object start(IApplicationContext context) throws Exception {
        // Return value 0 is considered as a successful execution on Unix systems
		System.out.println("Validator Called!");
		EMFScope scope = initializeModelScope();
		AdvancedViatraQueryEngine engine = prepareAdvancedQueryEngine(scope);
		printAllMatches(engine);
		addChangeListeners(engine);
		return 0;
	}

	@Override
	public void stop() {
        // Headless applications do not require specific stop steps
	}

	
	private EMFScope initializeModelScope() {
		ResourceSet rs = new ResourceSetImpl();
		rs.getResource(URI.createPlatformPluginURI("rbacviatratest/test.rbac", true), true);

		return new EMFScope(rs);
	}
	
	private AdvancedViatraQueryEngine prepareAdvancedQueryEngine(EMFScope scope) {
	    AdvancedViatraQueryEngine engine = AdvancedViatraQueryEngine.createUnmanagedEngine(scope);

	    // Initialize all queries on engine
	    TestQueries.instance().prepare(engine);

	    return engine;
	}
	
	
	
	IMatchUpdateListener<RoleName.Match> listenerRoleName = new IMatchUpdateListener<RoleName.Match>() {
	    @Override
	    public void notifyAppearance(RoleName.Match match) {
	        System.out.printf("[ADD RN] %s %n", match.prettyPrint());
	    }

	    @Override
	    public void notifyDisappearance(RoleName.Match match) {
	        System.out.printf("[REM RN] %s %n", match.prettyPrint());

	    }
	};
	
	IMatchUpdateListener<SameRoleName.Match> listenerSameRoleName = new IMatchUpdateListener<SameRoleName.Match>() {
	    @Override
	    public void notifyAppearance(SameRoleName.Match match) {
	        System.out.printf("[ADD SRM] %s %n", match.prettyPrint());
	    }

	    @Override
	    public void notifyDisappearance(SameRoleName.Match match) {
	        System.out.printf("[REM SRM] %s %n", match.prettyPrint());

	    }
	};

	private void addChangeListeners(AdvancedViatraQueryEngine engine) {
	    RoleName.Matcher matcherRoleName = RoleName.Matcher.on(engine);
	    SameRoleName.Matcher matcherSameRoleName = SameRoleName.Matcher.on(engine);
	    try {
	        // fireNow = true parameter means all current matches are sent to the listener
	        engine.addMatchUpdateListener(matcherRoleName, listenerRoleName, true);
	        engine.addMatchUpdateListener(matcherSameRoleName, listenerSameRoleName, true);
	        // execute model manipulations
	        matcherRoleName.getOneArbitraryMatch()
	        	.ifPresent(match -> match.getRole().setName("R1"));
	    } finally {
	        // Don't forget to remove listeners if not required anymore
	        engine.removeMatchUpdateListener(matcherRoleName, listenerRoleName);
	        engine.removeMatchUpdateListener(matcherSameRoleName, listenerSameRoleName);
	    }
	}
	
	private void printAllMatches(ViatraQueryEngine engine) {
		// Access pattern matcher
		RoleName.Matcher matcher = RoleName.Matcher.on(engine);
		// Get and iterate over all matches
		for (RoleName.Match match : matcher.getAllMatches()) {
			// Print all the matches to the standard output
			System.out.println("Found Role:" + match.getName());
		}
	}
	
	  public void execute() {
		    this.statements.<RoleName.Match>fireAllCurrent(this.getExampleRule());
		  }
		  
		  private BatchTransformationStatements createTransformation() {
		    BatchTransformationStatements _xblockexpression = null;
		    {
		      SimpleModelManipulations _simpleModelManipulations = new SimpleModelManipulations(this.engine);
		      this.manipulation = _simpleModelManipulations;
		      this.transformation = BatchTransformation.forEngine(this.engine).build();
		      _xblockexpression = this.statements = this.transformation.getTransformationStatements();
		    }
		    return _xblockexpression;
		  }
		  
		  private BatchTransformationRule<RoleName.Match, RoleName.Matcher> getExampleRule() {
		    final Consumer<RoleName.Match> _function = (RoleName.Match it) -> {
		      final RoleName.Match example = it;
		      example.setName("R1");
		    };
		    final BatchTransformationRule<RoleName.Match, RoleName.Matcher> exampleRule = this.factory.<RoleName.Match, RoleName.Matcher>createRule(RoleName.instance()).action(_function).build();
		    return exampleRule;
		  }
		  
		  public void dispose() {
		    boolean _notEquals = (!Objects.equal(this.transformation, null));
		    if (_notEquals) {
		      this.transformation.getRuleEngine().dispose();
		    }
		    this.transformation = null;
		    return;
		  }
	
	
}
