package queries

import org.eclipse.viatra.query.runtime.api.ViatraQueryEngine
import org.eclipse.viatra.query.runtime.emf.EMFScope
import org.eclipse.viatra.transformation.runtime.emf.modelmanipulation.IModelManipulations
import org.eclipse.viatra.transformation.runtime.emf.modelmanipulation.SimpleModelManipulations
import org.eclipse.viatra.transformation.runtime.emf.rules.batch.BatchTransformationRuleFactory
import org.eclipse.viatra.transformation.runtime.emf.rules.batch.BatchTransformationRule
import org.eclipse.viatra.transformation.runtime.emf.transformation.batch.BatchTransformation
import org.eclipse.viatra.transformation.runtime.emf.transformation.batch.BatchTransformationStatements
import org.eclipse.emf.ecore.resource.Resource
import com.hans.rbac.model.rbac.Role

class TestTransformation {

    /* Transformation-related extensions */
    extension BatchTransformation transformation
    extension BatchTransformationStatements statements
    
    /* Transformation rule-related extensions */
    extension BatchTransformationRuleFactory factory = new BatchTransformationRuleFactory
    extension IModelManipulations manipulation

    protected ViatraQueryEngine engine
    protected Resource resource
    //protected BatchTransformationRule<?,?> exampleRule

    new(Resource resource) {
        this.resource = resource
        // Create EMF scope and EMF IncQuery engine based on the resource
        val scope = new EMFScope(resource)
        engine = ViatraQueryEngine.on(scope);
        
        createTransformation

    }

    public def execute() {
//      Fire the defined rules here
//      exampleRule.fireAllCurrent
    }

    private def createTransformation() {
        //Create VIATRA model manipulations
        this.manipulation = new SimpleModelManipulations(engine)
        //Create VIATRA Batch transformation
        transformation = BatchTransformation.forEngine(engine)
        .build
        //Initialize batch transformation statements
        statements = transformation.transformationStatements
    }
    
  private def getExampleRule() {
      val exampleRule = createRule(RoleName.instance).action[
	    val cpsApplicationInstance = it.appInstance
	    val appId = cpsApplicationInstance.identifier
	    println('''Mapping application with ID: «appId»''')
	
	    /* Find the DeploymentHost created from the HostInstance to which the source ApplicationInstance is allocated */
	    val cpsHostInstance = cpsApplicationInstance.allocatedTo
	    val depHost = engine.cps2depTrace.getAllValuesOfdepElement(null, null, cpsHostInstance).filter(DeploymentHost).head
	    /* Create & initialize DeploymentApplication in this DeploymentHost */
	    val deploymentApplication = depHost.createChild(deploymentHost_Applications, deploymentApplication) => [
	        set(deploymentApplication_Id, appId)
	    ]
	
	    /* Create trace element in trace model */
	    cps2dep.createChild(CPSToDeployment_Traces, CPS2DeploymentTrace) => [
	        addTo(CPS2DeploymentTrace_CpsElements, cpsApplicationInstance)
	        addTo(CPS2DeploymentTrace_DeploymentElements, deploymentApplication)
	    ]
	
	    println('''Mapped application with ID: «appId»''')
	].build
      return exampleRule
  }

    def dispose() {
        if (transformation != null) {
            transformation.ruleEngine.dispose
        }
        transformation = null
        return
    }
}
