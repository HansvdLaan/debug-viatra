/**
 * Generated from platform:/resource/rbacviatratest/src/queries/TestQueries.vql
 */
package queries;

import org.eclipse.viatra.query.runtime.api.ViatraQueryEngine;
import org.eclipse.viatra.query.runtime.api.impl.BaseGeneratedPatternGroup;
import queries.HostIpAddress;
import queries.SameRoleName;

/**
 * A pattern group formed of all public patterns defined in TestQueries.vql.
 * 
 * <p>Use the static instance as any {@link interface org.eclipse.viatra.query.runtime.api.IQueryGroup}, to conveniently prepare
 * a VIATRA Query engine for matching all patterns originally defined in file TestQueries.vql,
 * in order to achieve better performance than one-by-one on-demand matcher initialization.
 * 
 * <p> From package queries, the group contains the definition of the following patterns: <ul>
 * <li>hostIpAddress</li>
 * <li>sameRoleName</li>
 * </ul>
 * 
 * @see IQueryGroup
 * 
 */
@SuppressWarnings("all")
public final class TestQueries extends BaseGeneratedPatternGroup {
  /**
   * Access the pattern group.
   * 
   * @return the singleton instance of the group
   * @throws ViatraQueryRuntimeException if there was an error loading the generated code of pattern specifications
   * 
   */
  public static TestQueries instance() {
    if (INSTANCE == null) {
        INSTANCE = new TestQueries();
    }
    return INSTANCE;
  }
  
  private static TestQueries INSTANCE;
  
  private TestQueries() {
    querySpecifications.add(HostIpAddress.instance());
    querySpecifications.add(SameRoleName.instance());
  }
  
  public HostIpAddress getHostIpAddress() {
    return HostIpAddress.instance();
  }
  
  public HostIpAddress.Matcher getHostIpAddress(final ViatraQueryEngine engine) {
    return HostIpAddress.Matcher.on(engine);
  }
  
  public SameRoleName getSameRoleName() {
    return SameRoleName.instance();
  }
  
  public SameRoleName.Matcher getSameRoleName(final ViatraQueryEngine engine) {
    return SameRoleName.Matcher.on(engine);
  }
}
